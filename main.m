//
//  main.m
//  bits2bytes
//
//  Created by Alex Lelievre on 6/28/20.
//  Copyright Â© 2020 Alex Lelievre. All rights reserved.
//

#import <Foundation/Foundation.h>


#pragma mark Data examples captured from SDR
        // bit rate: 8621 kbps - 915 MHz captures (mostly, some from 909990)

        // 104 bit message - 3 values (temp, humidity, rain)
//        "73.1244, -0.976344, 67.5757, -0.985309, 60.0791, -0.999281, 63.9281, -0.99068, 71.3111, -0.949562, 64.336, -0.958154, 55.5842, -0.824269, 58.0477, -0.992134, -0.999649, -0.990098, 72.4045, -0.999599, 72.7943, 59.0849, -0.985316, 57.1913, 69.1936, 66.4912, -0.96867, 53.7203, -0.975944, 60.1708, -0.98248, -0.992789, 64.2639, -0.998406, 72.3172, -0.999453, 64.9448, -0.992861, -0.972575, 61.4363, -0.992251, 65.8087, -0.988542, -0.968789, -0.977693, -0.983779, 57.3511, 49.1333, -0.998213, -0.99066, -0.954539, -0.960222, -0.97979, 55.7244, 48.3199, -0.994995, -0.991585, 47.8875, 51.5868, 50.463, -0.99458, -0.996436, -0.908744, -0.998104, -0.969684, -0.996841, -0.998328, 46.0922, -0.980674, -0.978422, -0.999989, -0.990193, -0.993387, 48.6481, -0.982636, 43.4392, -0.966431, 38.4093, -0.994103, 32.6239, -0.939176, -0.953497, 33.4776, -0.996997, -0.992969, -0.998787, -0.99616, -0.972717, -0.984512, -0.989887, -0.99357, -0.999577, -0.994991, -0.999392, -0.999783, -0.997405, -0.960625, -0.989869, -0.999736, -0.982543, -0.981042, 25.6127, 28.3135, -0.999252, -0.988943";
//        Hibbles:   A  9  4  3  0  6  7  0  1  0  5  5  2  0  0  0  0  6  CRC: 0x6 -> Quartet[0]:  temp:  6  7  0 -> Quartet[1]:  humidity:  0  5  5 -> Quartet[2]:  rain:  0  0  0
//        "10.9001, -0.996213, 12.2964, -0.994854, 11.3541, -0.994928, 11.6966, -0.997245, 11.0618, -0.998946, 10.2917, -0.998566, 10.8178, -0.998748, 10.8894, -0.994636, -0.998464, -0.979993, 12.8532, -0.995938, 11.8489, 10.6643, -0.999641, 10.5262, 11.3505, 11.1497, -0.999932, 9.99866, -0.99876, 10.5141, -0.999501, -0.98854, 11.123, -0.998562, 10.8842, -0.993041, 11.0815, -0.997213, -0.999848, 10.4125, -0.996813, 10.6053, -0.995021, -0.996476, -0.995778, -0.978974, 10.4761, 8.87021, -0.983437, -0.998156, -0.99109, -0.998995, -0.999791, 8.90265, 9.21341, -0.980113, -0.989612, 9.07658, 7.96277, -0.98016, -0.994037, -0.997265, 7.97372, 7.97097, -0.996943, -0.99872, 7.13086, -0.996894, -0.999852, -0.992892, -0.994106, -0.99882, -0.991922, -0.999554, -0.977688, -0.998411, -0.985086, -0.993072, -0.994121, -0.981789, -0.996863, 5.13576, -0.99975, -0.99963, -0.994885, -0.9966, -0.998673, -0.999106, -0.995352, -0.999307, -0.999592, -0.997776, -0.996707, -0.999157, -0.995116, -0.988266, -0.99802, -0.999176, -0.994455, 4.4064, 3.93398, -0.998116, 3.97118";
//        "20.0172, -0.985876, 21.1844, -0.970745, 18.1761, -0.999375, 19.1883, -0.998711, 18.3063, -0.999496, 17.3519, -0.975448, 17.5624, -0.999629, 19.0196, -0.984201, -0.979021, -0.998234, 17.9086, -0.980043, 15.5177, 19.0443, -0.999521, 17.3353, 15.9817, 15.0117, -0.98875, 15.836, -0.996524, 15.1615, -0.984577, -0.998637, 14.0845, -0.996226, 12.7384, -0.995622, 14.018, -0.984285, -0.998419, 18.0231, -0.999685, 15.4703, -0.992138, -0.992974, -0.998675, -0.996098, 14.8402, 13.6026, -0.996762, -0.992127, -0.999471, -0.999227, -0.971285, 12.7918, 13.8063, -0.998739, -0.997837, -0.999551, 15.2693, -0.997293, -0.997042, -0.973911, 10.9439, -0.994627, -0.994479, -0.999188, -0.992303, 11.172, -0.997588, -0.991121, -0.997429, -0.983386, -0.99396, 12.1551, 10.8903, -0.999696, -0.989479, 11.3027, -0.997232, 11.797, -0.994061, -0.995658, 12.8775, -0.992916, -0.992392, -0.999732, -0.992957, -0.998195, -0.995638, -0.988464, -0.993833, -0.996356, -0.994135, -0.998474, -0.998112, -0.99838, 11.4426, 9.13709, 12.0346, 10.6279, -0.996858, -0.998306, -0.996851, 9.3596, -0.988728";
//        "11.3865, -0.975022, 11.6572, -0.995692, 11.5092, -0.998289, 12.0649, -0.977652, 10.6317, -0.988796, 11.3107, -0.999518, 11.863, -0.99568, 11.4407, -0.994836, -0.985935, -0.973225, 11.873, -0.991363, 10.8589, 10.977, -0.989248, 11.912, 11.2906, 11.9575, -0.974966, 11.9468, -0.999335, 11.2042, -0.995003, -0.999032, 10.4564, -0.999934, 9.9089, -0.999666, 10.958, -0.99649, -0.999324, 11.2242, -0.993449, 10.4608, -0.997726, -0.999992, -0.992742, -0.998876, 10.2252, 9.32012, -0.982954, -0.990279, -0.9963, -0.992446, -0.999023, 9.20435, 9.29324, -0.993752, -0.996467, 8.42005, -0.992488, 9.27707, -0.997834, 8.22042, -0.99596, 8.33997, -0.998038, -0.99448, 7.52471, -0.998392, -0.998967, -0.99716, -0.993265, -0.995051, -0.999428, -0.997087, -0.999717, -0.996263, -0.997596, -0.999059, -0.996563, -0.988956, -0.999392, -0.998764, 5.6315, 4.69986, -0.999035, 5.23688, -0.999666, -0.999602, -0.994342, -0.999952, -0.995621, -0.998618, -0.9964, -0.999811, -0.999797, -0.999726, 3.99796, -0.99688, 4.09318, -0.998227, 3.47667, 4.47553, 4.08933";
//        "15.6912, -0.989095, 10.2644, -0.992187, 12.0381, -0.995369, 9.82128, -0.997321, 7.37873, -0.998108, 8.7965, -0.99727, 11.1559, -0.97697, 12.3526, -0.991746, -0.996176, -0.971897, 7.77097, -0.995895, 7.14248, 12.2383, -0.99315, 9.62398, 9.50365, 12.2166, -0.982625, 10.205, -0.996661, 10.1108, -0.999177, -0.994654, 10.6705, -0.997759, 10.3757, -0.945157, 10.1797, -0.986181, -0.989851, 9.94102, -0.990396, 9.03307, -0.984287, -0.995197, -0.999653, -0.984884, 6.6007, 6.80745, -0.986336, -0.993556, -0.993756, 7.36871, -0.998662, -0.988956, -0.999385, -0.995061, -0.996328, 4.62648, -0.996715, 5.19548, 8.48528, -0.954778, -0.998655, 6.56063, -0.990898, -0.990004, 6.48626, -0.89797, -0.999606, -0.996485, -0.997054, -0.995687, -0.995997, -0.999526, -0.998682, -0.999132, -0.995432, -0.999855, -0.994273, -0.993083, -0.988731, 3.26779, -0.939273, -0.993791, -0.9936, -0.995673, -0.998273, -0.994004, -0.994945, -0.999965, -0.991248, -0.996764, -0.997714, -0.999302, -0.99473, -0.997826, -0.998574, 3.76776, 3.66673, 4.15295, -0.962142, -0.99522, -0.99786, 12.8377, -0.998877";

        // 104 bit message - without wind sensor -- error bit is on
//        "11.0643, -0.989676, 10.0946, -0.981379, 8.85142, -0.990969, 9.93389, -0.990538, 9.16159, -0.995369, 10.5805, -0.993952, 9.00603, -0.995393, 10.3814, -0.999958, -0.963972, -0.99979, 8.38118, -0.975776, 8.13965, 10.0667, -0.988146, 9.49788, 9.68603, 7.23805, -0.993981, 8.58998, -0.987567, 8.1741, -0.997283, -0.994586, 10.2694, -0.996726, 9.1293, -0.998961, 10.8862, -0.998584, -0.996794, 8.4809, -0.977623, 8.39407, -0.991494, 8.33514, -0.985745, -0.999709, 8.67423, 8.59503, -0.993035, -0.99028, -0.993716, 10.4079, -0.991216, -0.996858, -0.985262, -0.998063, -0.994211, 7.33865, 8.83395, -0.997113, -0.999207, -0.985544, 9.22624, -0.998311, -0.99984, -0.992141, 7.84196, -0.997682, -0.992422, -0.989789, -0.999384, -0.98062, -0.993908, -0.995033, -0.997594, -0.995933, -0.985057, -0.998772, -0.995673, -0.997424, -0.996162, -0.999733, 7.25928, 6.40941, -0.9938, -0.985181, 7.55205, 5.28187, 7.54697, 6.32857, 7.12313, 8.75989, 5.77796, 7.46766, 7.3562, -0.997591, 7.95514, -0.9987, -0.987977, -0.992549, 7.37643, -0.992669, 7.14554, 6.14416, -0.999043";
//        Hibbles:   A  9  5  3  1  0  6  2  2  0  0  0  3  3  F  E  8  B  CRC: yes (0x8B) -> Quartet[0]:  humidity:  0  6  2 -> Quartet[1]:  rain:  0  0  0 -> Quartet[2]:  wind:  3 15 14
//        "17.1384, -0.999317, 15.4433, -0.992667, 13.4275, -0.998084, 15.5502, -0.997302, 14.691, -0.994931, 14.9092, -0.997732, 14.6529, -0.995836, 14.1127, -0.999732, -0.994226, -0.998889, 16.162, -0.993378, 15.7575, 14.9643, -0.981771, 15.2652, 10.9038, 15.1912, -0.98548, 15.2355, -0.985972, 13.2902, -0.999745, -0.987942, 11.4293, -0.988769, 12.7965, -0.997066, 10.6983, -0.993803, -0.996399, 12.7445, -0.995897, 13.8493, -0.9971, 11.0528, -0.996368, -0.995745, 14.576, 12.0984, -0.981689, -0.996326, 13.1468, -0.99048, -0.978161, -0.991269, -0.996298, -0.993654, -0.995098, -0.999609, -0.997655, -0.979485, -0.995214, -0.98697, -0.995787, -0.98807, -0.997702, -0.986444, 11.4817, 11.4272, -0.997344, -0.993701, 10.7627, 10.7156, 11.4931, 8.53886, 11.6928, 9.86439, 10.1874, 11.4487, 10.2766, -0.99867, -0.989821, 11.8186, -0.974268, -0.998968, -0.999708, -0.990112, -0.992967, 10.1282, 10.2704, 10.715, 10.6131, 9.41675, 8.71887, 11.1167, 8.90915, -0.986664, 8.92136, 9.63074, -0.996039, 9.9063, -0.997259, -0.999003, -0.989777";
//        Hibbles:   A  9  5  3  2  0  0  0  3  3  F  E  4  1  F  E  D  CRC: no (0x39) -> Quartet[0]:  rain:  0  0  0 -> Quartet[1]:  wind:  3 15 14 -> Quartet[2]:  gust:  1 15 14
//        "5.65829, -0.99694, 4.25071, -0.995713, 5.29609, -0.9898, 4.21792, -0.992772, 4.63896, -0.993386, 4.89169, -0.997576, 4.73331, -0.979292, 4.54477, -0.992828, -0.998846, -0.990624, 4.33791, -0.99838, 5.03292, 3.90531, -0.997135, 4.19627, 4.44257, 4.28398, -0.986659, 4.26093, -0.99046, 4.12378, -0.999864, -0.99647, 3.43054, -0.996569, 3.76403, -0.994883, 4.38937, -0.986884, -0.999956, 3.29029, -0.999635, 4.08977, -0.988661, 3.46116, -0.999863, -0.999826, 3.68873, 2.97077, -0.997342, -0.997472, 3.2458, -0.999038, -0.99835, -0.998954, -0.998531, -0.990467, -0.996707, -0.994678, -0.991612, -0.99668, -0.988666, -0.999398, -0.998639, -0.998423, -0.999484, -0.998982, 3.26348, 3.21926, -0.991217, -0.997809, 3.00681, 2.46927, 3.21206, 3.01272, 2.2528, 2.75761, 2.67166, 3.04825, 2.76197, -0.994749, -0.976707, 2.65936, -0.996234, -0.999481, -0.995936, -0.995607, -0.997256, 2.59579, 2.76291, 2.94746, 2.5095, 2.58399, 2.54534, 2.11618, 2.70555, -0.992945, 2.38316, 2.36808, -0.999818, 2.27071, -0.996635, -0.985813, -0.994366";
//        "16.6045, -0.985782, 17.48, -0.997508, 17.5144, -0.945241, 16.5424, -0.99702, 16.4152, -0.997104, 15.5928, -0.959808, 15.363, -0.995368, 17.3411, -0.998106, -0.995809, -0.978513, 18.2524, -0.997552, 17.4504, 15.3312, -0.99845, 15.6621, 15.8859, 15.8701, -0.997503, 14.4044, -0.999569, 13.6582, -0.999058, -0.999247, 15.6381, -0.98777, 14.5938, -0.990813, 14.9793, -0.999869, -0.996187, 14.3267, -0.99078, 14.9053, -0.996164, 14.1532, -0.970986, -0.998912, 14.591, 14.9559, -0.990073, -0.996289, -0.997427, 10.7449, -0.997233, -0.977751, -0.999648, -0.999519, -0.974685, 13.1965, 12.2178, -0.996698, -0.998587, 11.6996, -0.994047, 10.4536, -0.996972, -0.994666, 12.9044, -0.999219, -0.998963, -0.991307, -0.997075, -0.998697, -0.991028, -0.999147, -0.997825, -0.994757, -0.993467, -0.996091, -0.998741, -0.993265, -0.992169, -0.999069, 9.69484, 10.2959, -0.980728, -0.994958, 10.447, 11.1369, 10.2313, 11.4103, 10.9162, 9.49522, 12.8544, 9.64724, 10.3639, -0.983689, 10.1795, 9.48947, -0.99947, 10.809, -0.998346, -0.999626, -0.998102";
//        "5.61847, -0.982705, 5.5853, -0.993617, 6.17744, -0.975884, 5.30847, -0.999797, 5.16642, -0.998013, 5.51096, -0.99767, 5.20352, -0.989459, 4.21455, -0.999531, -0.994585, -0.994151, 4.86287, -0.999204, 4.31751, 4.3231, -0.994287, 4.03028, 4.37896, 4.19423, -0.995544, 4.18729, -0.996388, 3.94541, -0.999496, -0.995752, 4.96141, -0.994354, 4.11441, -0.999115, 3.98735, -0.99411, -0.998433, 4.11125, -0.996884, 3.8075, -0.993398, 4.06888, -0.994657, -0.99794, 3.12656, 3.44084, -0.996872, -0.998502, -0.999422, 3.29544, -0.994877, -0.99455, -0.998507, -0.993405, -0.996783, 3.25697, 2.90592, 3.04078, -0.999876, -0.993436, -0.999749, -0.997713, -0.994002, -0.997977, 3.25625, -0.999942, -0.994551, -0.99641, -0.99037, -0.995774, -0.997539, -0.999215, -0.989038, -0.995702, -0.998851, -0.999308, -0.997534, -0.9978, -0.986869, -0.995751, 2.85604, 2.89702, -0.998061, -0.998939, 2.96372, 2.95381, 2.6374, 2.31978, 2.75297, 2.08106, 2.804, 3.14739, 2.43297, -0.999707, -0.986555, 2.46506, 2.57945, -0.997722, -0.997668, -0.999912, -0.995867";
//        "7.5833, -0.999952, 7.09031, -0.99907, 7.10855, -0.994934, 6.46388, -0.998646, 6.64867, -0.993841, 6.61655, -0.999746, 5.79057, -0.999091, 4.70853, -0.999713, -0.997346, -0.980672, 5.26642, -0.990758, 5.80315, 5.37638, -0.998591, 5.3873, 4.58612, 6.12176, -0.990113, 5.62875, -0.989291, 5.0009, -0.983174, -0.999284, 4.47223, -0.997003, 4.6704, -0.997474, 5.2439, -0.988538, -0.997896, 4.08142, -0.996082, 4.81387, -0.99909, 4.65473, -0.992897, -0.997658, 4.60794, 3.73994, -0.992301, -0.996405, -0.991445, 4.20622, -0.996519, -0.997646, -0.999582, -0.997614, -0.992784, 3.78703, 3.64723, 3.99305, -0.989722, -0.99772, -0.995259, 3.86153, -0.996872, -0.99799, 3.50631, -0.991094, -0.981976, -0.994706, -0.996122, -0.997022, -0.999954, -0.991124, -0.993535, -0.995189, -0.998988, -0.996638, -0.987915, -0.999962, -0.993587, -0.995003, 3.46755, 3.34214, -0.998558, -0.998604, 3.14908, 2.83387, 3.05719, 2.72044, 2.80318, 2.82232, 2.64534, 2.94196, 2.646, -0.997849, 2.76001, -0.997665, 2.65237, 2.72684, -0.99804, -0.991724, 2.46195, 2.43562, -0.998729";

        
        // 90 bit message - I think this is rain + gust
//        "82.0806, -0.964935, 81.6432, -0.996153, 73.8024, -0.988554, 79.3682, -0.997412, 69.8583, -0.999847, 72.0287, -0.976636, 70.2298, -0.970734, 60.9199, -0.976476, -0.985383, -0.95492, 60.2444, -0.989385, 58.7415, 72.1029, -0.994616, 68.1253, 70.955, 61.0372, -0.954918, 67.711, -0.998724, 65.0383, -0.9991, -0.99963, 58.7727, -0.985495, 53.7202, -0.990167, 57.7526, -0.977146, -0.99376, 55.351, -0.974967, 56.1192, -0.993047, -0.986465, -0.974197, -0.970524, 59.5348, -0.963563, -0.988236, -0.945821, 46.8218, -0.985632, -0.992317, -0.996745, -0.988334, -0.975014, -0.984732, -0.959798, -0.999945, -0.990452, -0.991309, -0.99804, -0.932732, -0.976039, -0.959468, 41.0191, -0.976121, -0.963524, -0.9887, -0.990844, -0.991065, -0.983719, -0.99365, -0.995419, -0.991353, -0.999135, -0.990687, -0.991192, -0.996785, -0.993481, 43.2212, 32.7633, 37.0506, 37.3032, -0.996289, 35.0793, -0.999962, 33.5135, -0.992226";
//        Hibbles:   A  9  4  2  2  0  0  0  4  0  0  0  F  5  CRC: yes (0xF5) -> Quartet[0]:  rain:  0  0  0 -> Quartet[1]:  gust:  0  0  0
//        "9.28732, -0.971924, 9.09485, -0.997017, 10.0669, -0.999758, 8.92877, -0.998317, 9.8115, -0.977678, 8.44234, -0.997624, 10.2032, -0.98972, 8.13177, -0.982654, -0.996616, -0.996283, 9.34068, -0.994951, 8.54638, 8.83703, -0.996329, 9.03241, 8.96442, 7.62588, -0.997888, 8.85874, -0.994781, 8.33492, -0.997324, -0.99859, 8.90484, -0.998742, 8.91164, -0.996946, 8.46496, -0.996393, -0.994151, 7.18851, -0.996448, 8.54845, -0.996992, -0.988436, -0.984954, -0.997506, 7.16614, -0.998183, -0.995583, -0.999175, 6.96384, -0.993836, -0.99743, -0.997869, -0.978658, -0.999109, -0.993295, -0.999399, -0.98615, -0.980628, -0.989203, -0.997759, -0.999573, -0.997333, -0.995583, 5.77233, -0.9991, -0.989935, -0.999057, -0.999527, -0.994871, -0.993162, -0.992884, -0.997703, -0.998669, -0.979183, -0.998611, -0.992991, -0.998134, -0.988562, 3.42401, 4.3358, 4.78757, 4.02611, -0.999125, 3.6988, -0.999788, 3.26576, -0.992847";
//        "74.7359, -0.985265, 72.3952, -0.992332, 75.0904, -0.981972, 73.4675, -0.61983, 71.1832, -0.942447, 72.0001, -0.994531, 72.4314, -0.909773, 70.4484, -0.993936, -0.997489, -0.985376, 71.5268, -0.87911, 71.0965, 68.8394, -0.992052, 69.1645, 70.8141, 67.389, -0.973675, 67.5403, -0.982934, 66.701, -0.957407, -0.994385, 63.9872, -0.841406, 66.7812, -0.833175, 70.3444, -0.972288, -0.979135, 64.8208, -0.997103, 64.8522, -0.997685, -0.977373, -0.98335, -0.959009, 62.5253, -0.911904, -0.958549, -0.975269, 58.4328, -0.977024, -0.96182, -0.995318, -0.980456, -0.907101, -0.998932, -0.910875, -0.96651, -0.999324, -0.997395, -0.99861, -0.964088, -0.999741, -0.974319, -0.990887, 47.1862, 49.4326, -0.972094, 48.2965, -0.983207, -0.997324, -0.982137, -0.967505, -0.997953, -0.984251, -0.998828, -0.997119, -0.998769, -0.955487, -0.979436, 26.619, -0.205151, -0.976456, 12.9678, 35.7889, 10.3149, 4.55684, -0.947073";
//        "74.7243, -0.985402, 72.2984, -0.995006, 74.9162, -0.977769, 72.8731, -0.892646, 69.4277, -0.943347, 69.4464, -0.979218, 70.4918, -0.983811, 70.9137, -0.991005, -0.96481, -0.978454, 71.664, -0.953166, 70.6, 69.8848, -0.953666, 69.5563, 70.5195, 70.7287, -0.998171, 68.8372, -0.992409, 69.3349, -0.934888, -0.968378, 68.8457, -0.973976, 67.506, -0.93737, 63.4785, -0.953943, -0.950464, 64.823, -0.900344, 69.6034, -0.999391, -0.997348, -0.880028, -0.744506, 66.2745, -0.977915, -0.972047, -0.973319, 58.1067, -0.973383, -0.986607, -0.998186, -0.993715, -0.990811, -0.998344, -0.992897, -0.993806, -0.963183, -0.95756, -0.992456, -0.890001, -0.992359, -0.979712, -0.98188, 49.1887, 49.7518, -0.992153, 47.0568, -0.999501, -0.997917, -0.994072, -0.991223, -0.99304, -0.968151, -0.998544, -0.996591, -0.988268, -0.980467, -0.937363, 38.6006, -0.93524, -0.98496, 35.2984, 35.7745, -0.998191, 34.1671, -0.989568";
//        "11.6428, -0.32366, 10.8979, -0.995037, 11.8898, -0.996175, 10.4268, -0.993918, 11.3165, -0.980674, 10.9377, -0.98563, 10.6312, -0.998947, 11.3457, -0.997565, -0.990971, -0.976334, 10.7562, -0.998841, 9.76694, 11.693, -0.996198, 11.3309, 9.96889, 9.7585, -0.998004, 10.8228, -0.990189, 11.3577, -0.993599, -0.999766, 10.6157, -0.981482, 10.4407, -0.992534, 9.39674, -0.988569, -0.992601, 10.6924, -0.971837, 10.308, -0.999632, -0.997158, -0.999247, -0.993262, 10.3665, -0.999529, -0.99795, -0.983199, 9.03969, -0.988159, -0.995854, -0.996323, -0.99037, -0.981258, -0.995196, -0.99936, -0.997566, -0.99192, -0.998554, -0.990864, -0.996856, -0.994201, -0.995062, -0.976129, 6.82991, 7.46202, -0.995264, 7.57887, -0.992591, -0.993068, -0.999847, -0.973057, -0.994071, -0.992851, -0.984295, -0.9974, -0.990072, -0.998547, -0.983572, 4.98907, -0.997472, -0.991227, 5.80547, 5.65817, -0.994042, 4.964, -0.981239";
//        "14.6622, -0.999372, 18.6847, -0.997371, 18.9895, -0.996887, 17.9009, -0.996632, 20.0598, -0.994248, 19.0419, -0.995317, 17.3201, -0.972347, 17.0077, -0.998533, -0.996032, -0.997966, 16.9096, -0.998682, 17.2494, 17.1644, -0.998184, 17.0548, 14.14, 16.1189, -0.998717, 16.5648, -0.997563, 18.741, -0.996094, -0.998194, 12.1035, -0.98924, 14.7604, -0.986837, 16.5228, -0.993411, -0.999601, 15.4638, -0.995021, 14.3923, -0.954568, -0.993933, -0.998753, -0.985098, 13.7469, -0.998862, -0.998596, -0.99988, 17.1802, -0.998458, -0.9963, -0.998345, -0.996813, -0.999289, -0.998059, -0.994535, -0.999109, -0.999488, -0.999761, -0.998869, -0.998547, -0.992352, -0.99859, -0.988646, 13.792, 10.4051, -0.990691, -0.995788, 14.1261, -0.997636, -0.998818, -0.988697, -0.99896, -0.997143, -0.992916, -0.990965, -0.99904, -0.998476, -0.999416, -0.994984, -0.99964, 9.69574, -0.993949, 7.62637, 9.97729, 7.83799, -0.998014";

        // 90 bit message - without wind sensor -- error bit is on
//        "4.64915, -0.996087, 4.59648, -0.991272, 5.3676, -0.996323, 5.83089, -0.991052, 6.59866, -0.994649, 6.59724, -0.984614, 5.5159, -0.999825, 4.76144, -0.986759, -0.994305, -0.994568, 6.68891, -0.993546, 6.31868, 5.37419, -0.998639, 5.85456, 6.4944, 5.13064, -0.989235, 5.04959, -0.981182, 5.83456, -0.999905, -0.995632, 5.83499, -0.998437, 5.52994, -0.995343, 5.73619, -0.982542, -0.989358, 4.78575, -0.971702, 4.87055, -0.992528, 5.45894, -0.99691, -0.99961, 5.57045, -0.989852, -0.997406, -0.984388, 4.06465, -0.995482, -0.969314, -0.981696, -0.996017, -0.994528, -0.993546, -0.985458, -0.995752, -0.998626, -0.999544, -0.993697, -0.997699, -0.988301, -0.997194, -0.996264, 5.05757, 6.18849, -0.998946, -0.997994, 4.92002, 6.0534, 5.04597, 5.62602, 5.20858, 4.84797, 5.54843, 5.26609, 4.21263, -0.996654, -0.99773, -0.998367, -0.998633, -0.998486, -0.995641, -0.994365, 5.1636, -0.992361, -0.995519";
//        Hibbles:   A  9  5  2  2  0  0  0  3  3  F  E  0  2  CRC: yes (0x2) -> Quartet[0]:  rain:  0  0  0 -> Quartet[1]:  wind:  3 15 14
//        "10.6429, -0.995759, 11.9287, -0.985503, 9.49823, -0.998544, 11.0726, -0.987867, 8.85013, -0.996024, 10.3263, -0.986253, 10.8015, -0.987621, 11.3928, -0.990535, -0.987307, -0.991736, 12.33, -0.994088, 9.6455, 11.2742, -0.985328, 8.48472, 10.9058, 10.4319, -0.999624, 12.3229, -0.990444, 8.99309, -0.999857, -0.994229, 10.4165, -0.9984, 11.3447, -0.998646, 9.68681, -0.982265, -0.999079, 8.73021, -0.998067, 7.72586, -0.995212, 7.95425, -0.999664, -0.976705, 8.5619, -0.994015, -0.995898, -0.989425, 7.93533, -0.992873, -0.985098, -0.976375, -0.997812, -0.98821, -0.99749, -0.997422, -0.998502, -0.998451, -0.999396, -0.98988, -0.997717, -0.999809, -0.992768, -0.99843, 7.63292, 9.04563, -0.997883, -0.995348, 7.36047, 8.62064, 7.34615, 8.91376, 8.14819, 6.9177, 9.22117, 7.51175, 6.55387, -0.998228, -0.98917, -0.997716, -0.996967, -0.998067, -0.999322, -0.99351, 6.88408, -0.996947, -0.995306, ";
//        "8.01194, -0.995522, 9.74454, -0.97638, 10.546, -0.994979, 10.0516, -0.984316, 10.649, -0.995169, 10.1154, -0.987479, 9.46108, -0.997384, 10.4154, -0.991843, -0.991794, -0.994431, 9.36649, -0.998081, 9.15159, 9.152, -0.998747, 8.47272, 10.8703, 8.10606, -0.995422, 7.79768, -0.994923, 7.11787, -0.981264, -0.999291, 10.4588, -0.998987, 9.18273, -0.999268, 9.78642, -0.999786, -0.98966, 8.73409, -0.9998, 8.37891, -0.997761, 10.5086, -0.994153, -0.994251, 7.94562, -0.974538, -0.998685, -0.993025, 9.39949, -0.993411, -0.998795, -0.992307, -0.999514, -0.986499, -0.988857, -0.996698, -0.996515, -0.99465, -0.994103, -0.995305, -0.994974, -0.978583, -0.980126, -0.999295, 8.46364, 6.75657, -0.985618, -0.996449, 7.43384, 6.29417, 8.52541, 6.96648, 7.84865, 8.322, 6.07744, 8.49046, 7.09418, -0.998786, -0.993525, -0.999195, -0.993678, -0.992172, -0.987263, -0.999627, 6.98902, -0.993629, -0.984987";
//        "14.6322, -0.99529, 13.4778, -0.996645, 14.4826, -0.992853, 13.7824, -0.990907, 14.295, -0.995893, 12.8619, -0.998903, 12.6591, -0.974977, 13.6897, -0.976197, -0.993999, -0.998267, 16.0377, -0.997617, 14.7639, 11.8426, -0.974375, 14.1568, 13.0546, 14.0318, -0.984552, 14.9448, -0.98917, 11.8525, -0.987305, -0.992321, 14.5109, -0.996205, 13.8026, -0.993224, 14.1416, -0.99883, -0.994284, 11.5571, -0.995743, 10.8448, -0.998701, 11.5987, -0.993484, -0.997697, 12.4031, -0.985108, -0.973362, -0.988807, 11.9056, -0.993334, -0.994881, -0.993957, -0.987741, -0.976972, -0.999276, -0.9963, -0.998387, -0.999177, -0.998399, -0.995951, -0.987633, -0.983343, -0.987848, -0.983897, 11.3939, 10.6795, -0.96947, -0.994182, 10.6116, 11.5927, 9.82764, 10.9271, 10.916, 9.27412, 10.8884, 10.6936, 10.7728, -0.988484, -0.994865, -0.987, -0.996981, -0.989213, -0.997309, -0.99355, 9.23104, -0.996581, -0.999287";
        
        
        // 90 bit message - humidity, rain
//        "0.736338, -0.92078, 0.602063, -0.859592, 0.783056, -0.836003, 0.73398, -0.964548, 0.725858, -0.839519, 0.779734, -0.900967, 0.760452, -0.96883, 0.838755, -0.996223, -0.886145, -0.832731, 0.737167, -0.830366, 0.852932, 0.70064, -0.918753, 0.780511, 0.828892, 0.706231, -0.916069, 0.65301, -0.895089, 0.747418, -0.893922, -0.893853, 0.80817, -0.863766, 0.727783, -0.882056, 0.704517, -0.812527, -0.874906, 0.697, -0.911856, 0.812255, -0.930949, -0.885008, -0.924791, -0.891048, 0.712499, -0.803605, -0.934642, -0.908162, -0.922654, 0.969446, -1.00847, -0.780614, -1.00611, -0.790883, -0.837028, 0.744731, -0.930395, 0.83216, -0.912551, 0.771647, -0.950389, 0.79782, -0.948339, -0.894245, 0.770778, -0.963786, -0.864977, -0.894016, -0.833458, -0.898873, -0.87886, -0.906084, -0.835625, -0.914955, -0.955664, -0.955176, -0.943911, -0.95831, 0.760637, 0.747245, -0.91659, 0.825424, -0.86214, -0.88872, -0.885114, 0.781708, -0.91054";
//        Hibbles:   A  9  4  2  1  0  5  5  2  0  0  0  D  1  CRC: yes (0xD1) -> Quartet[0]:  humidity:  0  5  5 -> Quartet[1]:  rain:      0  0  0
//        "10.9214, -0.997848, 10.6409, -0.999357, 11.5868, -0.997636, 11.083, -0.998513, 11.6835, -0.967084, 12.3112, -0.995725, 10.0747, -0.939294, 10.2736, -0.981384, -0.986293, -0.992585, 11.7263, -0.990239, 10.9698, 10.9064, -0.99981, 10.2212, 11.912, 12.2021, -0.999953, 11.5411, -0.99958, 11.423, -0.993653, -0.997898, 10.4267, -0.99019, 11.2713, -0.995602, 10.6412, -0.999294, -0.96513, 10.4078, -0.997521, 9.25549, -0.996263, -0.996639, -0.997397, -0.987873, 9.77662, -0.99395, -0.990397, -0.996851, -0.998194, 9.14849, -0.998559, -0.992917, -0.998608, -0.998403, -0.992303, 8.25101, -0.997176, 8.32614, -0.996713, 8.63384, 8.54793, 7.3804, -0.994097, -0.99608, 7.74018, -0.994991, -0.998898, -0.999883, -0.994301, -0.995775, -0.998405, -0.988004, -0.986701, -0.995428, -0.996888, -0.996507, -0.998029, -0.999637, -0.999417, 5.64295, -0.991728, 4.98735, 5.40673, 5.33405, -0.991015, 4.59565, -0.99851";
//        "75.4958, -0.955732, 72.7951, -0.937903, 73.0277, -0.894319, 73.3883, -0.958726, 71.8728, -0.960805, 70.6753, -0.987826, 71.3973, -0.954805, 70.2694, -0.991344, -0.996121, -0.9973, 69.4794, -0.941346, 69.4044, 66.0274, -0.995472, 62.5822, 69.4058, 69.0907, -0.99747, 68.8581, -0.987244, 68.0077, -0.981549, -0.993661, 66.4785, -0.994214, 66.0005, -0.967077, 64.2399, -0.981236, -0.998725, 62.5279, -0.989828, 61.4501, -0.998484, -0.940099, -0.919852, -0.955615, 58.2082, -0.986698, -0.995238, -0.998636, -0.989637, -0.999532, -0.991261, 57.7846, 53.8145, -0.945563, -0.95005, 55.1836, 54.6944, 49.9102, -0.951681, -0.992882, -0.920647, 47.983, -0.968612, -0.887516, 44.5014, -0.9861, -0.961056, -0.963554, -0.965962, -0.98781, -0.973115, -0.992025, -0.925565, -0.974013, -0.995008, -0.951299, -0.990913, -0.968937, 39.8466, -0.933343, 36.0127, 38.5501, -0.97158, -0.998276, -0.980316";
//        "69.8528, -0.999879, 61.2185, -0.992781, 62.046, -0.991832, 60.1679, -0.922711, 58.2382, -0.971422, 66.958, -0.990238, 58.2459, -0.992018, 61.1907, -0.994392, -0.954286, -0.99888, 66.797, -0.99987, 62.5648, 74.3463, -0.992839, 69.5739, 64.4207, 68.3374, -0.989215, 67.4651, -0.995765, 59.2473, -0.994156, -0.968551, 68.3458, -0.99379, 64.0556, -0.985263, 63.7072, -0.965898, -0.98855, 70.7197, -0.939052, 65.9206, -0.993245, -0.989735, -0.997965, -0.994709, 66.0018, -0.993354, -0.957163, -0.964727, -0.998741, -0.968902, -0.996158, 62.0651, 56.8099, -0.965508, -0.989788, 54.2897, 57.8946, 51.9988, -0.978306, -0.973851, 54.0872, -0.992834, -0.998977, -0.997463, 44.4956, -0.99786, -0.99302, -0.994764, -0.999055, -0.987107, -0.992708, -0.996085, -0.995589, -0.996054, -0.964985, -0.973608, -0.995805, -0.985678, -0.983505, 35.5657, 40.4325, 31.5533, 36.7784, -0.993872, 35.2626, -0.987057, -0.989236";
//        "71.8214, -0.996727, 79.492, -0.99918, 73.7673, -0.979221, 74.4488, -0.995205, 71.4665, -0.99295, 74.1843, -0.999252, 68.7709, -0.987612, 52.2474, -0.994808, -0.997411, -0.974495, 81.9537, -0.967949, 62.9669, 71.8347, -0.97546, 64.3727, 54.6947, 68.6522, -0.977375, 64.4731, -0.981307, 69.5941, -0.989259, -0.996048, 55.0782, -0.901756, 52.2951, -0.99823, 52.5182, -0.992669, -0.990635, 65.2942, -0.986369, 62.182, -0.993493, -0.999854, -0.989608, -0.993493, 56.9264, -0.985101, -0.98333, -0.960145, -0.996634, -0.985558, -0.996053, 57.7889, 57.0111, -0.997527, -0.997285, 58.5026, 54.3109, -0.970873, -0.980304, 53.3196, 55.4988, -0.997544, -0.994741, -0.993744, 41.1776, -0.986941, -0.973721, -0.995566, -0.998549, -0.981677, -0.996816, -0.98755, -0.982498, -0.994603, -0.9726, -0.998689, -0.991539, -0.964979, 41.253, 37.1489, 31.8691, 40.6675, -0.991109, 39.0089, 33.108, 28.266, -0.988059";
//        "13.0383, -0.98466, 17.4853, -0.993165, 15.6959, -0.990215, 12.3495, -0.995646, 12.7463, -0.99616, 12.0512, -0.992737, 10.9409, -0.982725, 11.6011, -0.994772, -0.995698, -0.981606, 7.77159, -0.992153, 10.7158, 12.4911, -0.987895, 13.5592, 9.72806, 7.66292, -0.999267, 7.38611, -0.999802, 9.38233, -0.993335, -0.992283, 9.48749, -0.986581, 11.6638, -0.998103, 11.1149, -0.995942, -0.98775, 10.6946, -0.998383, 11.5801, -0.995253, -0.989571, -0.998156, -0.998968, 7.3221, -0.996872, -0.986347, -0.973507, -0.986702, -0.996075, -0.99897, 7.82055, 6.57168, -0.983115, -0.999605, -0.979936, 7.54118, 10.8994, -0.997905, 7.89777, 5.69299, 7.15377, -0.993263, -0.992576, 5.3839, -0.998453, -0.995709, -0.997641, -0.99912, -0.999572, -0.997211, -0.999388, -0.999904, -0.998159, -0.998632, -0.99952, -0.99903, -0.996945, 5.87712, 4.67282, 6.50232, -0.995302, -0.999109, 3.9863, 5.49939, 4.18784, -0.991768";
//        "14.2056, -0.984811, 13.4868, -0.991545, 13.8589, -0.997303, 14.8492, -0.991906, 12.3805, -0.986261, 12.4844, -0.996618, 14.7284, -0.983402, 11.568, -0.997216, -0.988421, -0.999481, 14.0818, -0.997693, 14.1039, 13.7597, -0.994325, 12.9881, 12.3957, 14.227, -0.997802, 16.6594, -0.997925, 12.8287, -0.992047, -0.995277, 12.4931, -0.978224, 13.3178, -0.998613, 14.2783, -0.995029, -0.993825, 10.9008, -0.998116, 10.6214, -0.992554, -0.989759, -0.987122, -0.997971, 10.4854, -0.990185, -0.989013, -0.997285, -0.99805, -0.99513, -0.997425, 11.65, -0.997953, 10.2698, 11.1649, -0.979728, -0.998791, 9.4508, -0.995101, 8.14341, 9.11837, 7.83863, -0.982711, -0.99662, 8.57119, -0.994788, -0.999632, -0.998196, -0.994429, -0.996561, -0.999743, -0.996037, -0.998737, -0.995779, -0.98659, -0.999304, -0.99953, -0.99663, 5.31605, 7.12471, -0.995446, 6.8926, -0.993908, 6.65019, 7.02984, 5.08807, -0.996374";

        
        // 72 bit message -- rain only messages
//        "62.219, -0.917033, 68.6701, -0.97899, 65.528, -0.969475, 62.9443, -0.987908, 62.5109, -0.99476, 63.9186, -0.996705, 65.5732, -0.948807, 70.0843, -0.999915, -0.998848, -0.994967, 67.1531, -0.987253, 68.0653, 58.9668, -0.99207, 57.0498, 69.5543, 66.6127, -0.994383, 60.9637, -0.954108, 61.6146, -0.954171, -0.912816, 67.5126, -0.998368, 59.2767, -0.99108, 65.3115, -0.947339, -0.994878, 54.7759, -0.988027, 48.7103, -0.99293, -0.980834, -0.998268, -0.999104, -0.959024, 55.6039, -0.989881, -0.98818, 56.864, -0.995182, -0.997082, -0.990151, -0.998917, -0.988824, -0.994196, -0.981156, -0.985975, -0.996454, -0.996625, -0.975366, -0.985277, -0.942307, -0.984036, 41.4213, 41.5012, -0.979496, 42.9273, 45.1693, 38.541, -0.985932, -0.999779, -0.982431";
//        Hibbles:   A  9  4  1  2  0  0  0  6  E  CRC: yes (0x6E) -> Quartet[0]:  rain:      0  0  0
//        "64.8901, -0.923784, 72.8131, -0.979676, 63.7444, -0.995644, 70.4424, -0.991067, 62.8693, -0.998322, 67.636, -0.990953, 73.1675, -0.997703, 65.6166, -0.998328, -0.961142, -0.988909, 64.5806, -0.978157, 51.8796, 68.1458, -0.994506, 69.6946, 67.7473, 54.2102, -0.956004, 60.3785, -0.971937, 52.9365, -0.935086, -0.993766, 65.4187, -0.995724, 61.0526, -0.9997, 70.2174, -0.990115, -0.971169, 65.5306, -0.98281, 64.4558, -0.983093, -0.997766, -0.953128, -0.960862, -0.993065, 56.9427, -0.995826, -0.993322, 68.395, -0.973705, -0.989763, -0.96437, -0.988626, -0.978679, -0.99848, -0.990679, -0.98291, -0.987597, -0.986114, -0.975616, -0.997079, -0.994765, -0.978421, 45.4588, 35.7097, -0.989574, 44.1604, 46.2511, 43.3987, -0.995565, -0.994747, -0.995141";
//        "59.3452, -0.998804, 76.9375, -0.988609, 75.7264, -0.988121, 71.1414, -0.986802, 69.3381, -0.969944, 75.0885, -0.976326, 66.5396, -0.993964, 72.4559, -0.995046, -0.984113, -0.966219, 70.5233, -0.998165, 67.9388, 65.2598, -0.99005, 58.9849, 73.0523, 67.0984, -0.982269, 67.019, -0.978571, 68.1578, -0.980186, -0.973245, 74.0066, -0.985634, 69.208, -0.975001, 54.9274, -0.994135, -0.995007, 63.995, -0.951001, 55.7896, -0.959972, -0.983429, -0.981823, -0.922585, -0.978269, 59.5147, -0.981926, -0.985768, 60.5137, -0.99702, -0.981015, -0.979474, -0.974089, -0.98864, -0.996781, -0.998305, -0.989938, -0.984343, -0.988215, -0.988317, -0.996789, -0.995983, -0.969984, 53.7033, 43.7733, -0.98804, 37.548, 43.1621, 38.9307, -0.992074, -0.978113";
//        "12.0318, -0.981964, 11.528, -0.996994, 11.5119, -0.988893, 12.2799, -0.997059, 12.0326, -0.997307, 12.2084, -0.995892, 11.1574, -0.998478, 10.9976, -0.985078, -0.992275, -0.995055, 11.3866, -0.998363, 10.6252, 12.2192, -0.996876, 11.242, 10.5975, 10.2735, -0.99742, 10.7487, -0.989242, 10.0496, -0.997808, -0.995323, 10.7683, -0.995629, 10.7722, -0.989222, 10.8569, -0.994777, -0.99443, 10.6834, -0.980771, 10.5547, -0.989045, -0.995933, -0.997811, -0.950116, -0.99868, 9.31081, -0.99603, -0.997922, 9.44176, -0.989749, -0.995999, -0.996243, -0.998988, -0.999856, -0.993255, -0.993012, -0.994427, -0.994626, -0.994942, -0.999803, -0.99938, -0.999684, -0.997675, 7.85883, 7.49429, -0.998566, 6.34592, 7.04168, 6.58123";
//        "9.37811, -0.958227, 9.41735, -0.998881, 9.28766, -0.999816, 9.51436, -0.998119, 8.67759, -0.999764, 9.03171, -0.998596, 8.32517, -0.991656, 9.69646, -0.982694, -0.999395, -0.955498, 9.64866, -0.998249, 9.41137, 9.16978, -0.999139, 7.93533, 8.88206, 9.21279, -0.996182, 8.46113, -0.993743, 8.4498, -0.993952, -0.993762, 7.31767, -0.978055, 7.90891, -0.99837, 8.20083, -0.990932, -0.987885, 7.23902, -0.996576, 7.26891, -0.999289, -0.997272, -0.994144, -0.993763, -0.992938, 7.68749, -0.995623, -0.996955, 7.49586, -0.994881, -0.992503, -0.997077, -0.998834, -0.998879, -0.999525, -0.999421, -0.997711, -0.997982, -0.997354, -0.995228, -0.996558, -0.994228, -0.999625, 4.8765, 5.85057, 2.58683, 5.39416, 4.5735, -0.616186, -0.996696, -0.996978, -0.997886, -0.998879, -0.99408, -0.993217, -0.998921, -0.996288";
#pragma mark -





#define USE_BIG_ENDIAN
#define PRINT_BINARY
#define PRINT_FULL_HEX


#define c2f( a ) (((a) * 1.8000) + 32)
#define ms2mph( a ) ((a) * 2.23694)
#define km2mph( a ) ((a) / 0.621371)
#define millimeter2inch  0.0393700787402


static bool s_latch = false;


enum
{
    kType_temp,
    kType_humidity,
    kType_rain,
    kType_wind,
    kType_gust
};




#pragma mark -


uint8_t UpdateCRC(uint8_t res, uint8_t val) {
    for (int i = 0; i < 8; i++) {
      uint8_t tmp = (uint8_t)((res ^ val) & 0x80);
      res <<= 1;
      if (0 != tmp) {
        res ^= 0x31;
      }
      val <<= 1;
    }
  return res;
}


uint8_t CalculateCRC(uint8_t *data, uint8_t len) {
  uint8_t res = 0;
  for (int j = 0; j < len; j++) {
    uint8_t val = data[j];
    res = UpdateCRC(res, val);
  }
  return res;
}


uint8_t reverseBits( uint8_t num )
{
    unsigned int count = sizeof(num) * 8 - 1;
    unsigned int reverse_num = num;
      
    num >>= 1;
    while(num)
    {
       reverse_num <<= 1;
       reverse_num |= num & 1;
       num >>= 1;
       count--;
    }
    reverse_num <<= count;
    return reverse_num;
}



#pragma mark -


int main(int argc, const char * argv[]) {
    @autoreleasepool {

        printf( "-- tx32u ----------------------------------------------------------------------\n" );

        if( argc < 2 )
        {
            printf( "Wrong number of parameters.  Takes a single string with symbols in it.\n\n" );
            return -1;
        }

        NSMutableString* string = [[NSMutableString alloc] init];
        NSString* raw = [NSString stringWithUTF8String:argv[1]];
        
        NSArray* array = [raw componentsSeparatedByString:@","];
        [array enumerateObjectsUsingBlock:^( NSString* obj, NSUInteger idx, BOOL *stop ) {
            bool bit = (obj.floatValue > 0);
            [string appendString:bit ? @"1" : @"0"];  // might be easier to just directly go to binary from here...
        }];

        
        NSString* stripped = [string stringByReplacingOccurrencesOfString:@" " withString:@""];
        uint8_t nibble = 0;
        uint8_t byte = 0;

        uint8_t remainingBits = stripped.length % 8;
        if( remainingBits != 0 )
            printf( "Warning, do not have multiple of 8 bits! %d, remaining: %d\n\n", (int)stripped.length, remainingBits );
        
        unsigned char* buffer = malloc( stripped.length );
        const unsigned char* bits = (const unsigned char*)stripped.UTF8String;
        uint32_t nibbleCounter = 0;
        for( int i = 0; i < stripped.length; i++ )
        {
            int bitCounter = (i % 4);
            
            uint8_t bit = (bits[i] == '1');

#ifdef USE_BIG_ENDIAN
            // big-endian (if you are on intel)
            nibble |= bit << (3 - bitCounter);
#else
            // little-endian
            nibble |= bit << bitCounter;
#endif
            if( bitCounter == 3 )
            {
                buffer[nibbleCounter++] = nibble;
                nibble = 0;
            }
        }
        
        unsigned char* byte_buffer = malloc( stripped.length );
        uint32_t byteCounter = 0;
        for( int i = 0; i < stripped.length; i++ )
        {
            int bitCounter = (i % 8);
            
            uint8_t bit = (bits[i] == '1');

#ifdef USE_BIG_ENDIAN
            // big-endian (if you are on intel)
            byte |= bit << (7 - bitCounter);
            #else
            // little-endian
            byte |= bit << bitCounter;
#endif
            if( bitCounter == 7 )
            {
                byte_buffer[byteCounter++] = byte;
                byte = 0;
            }
        }

#ifdef PRINT_BINARY
        // print input string
        printf( "Input:  " );
        for( int i = 0; i < stripped.length; i++ )
        {
            int bitCounter = (i % 8);
            printf( "%c", stripped.UTF8String[i] );
            if( bitCounter == 7 )
                printf( " " );
        }
        printf( "\nBinary: " );
        
        // print converted input string
        for( int i = 0; i < nibbleCounter; i++ )
        {
            for( int x = 0; x < 4; x++ )
            {
                bool bit = (buffer[i] & (1 << x)) >> x;
                printf( "%d", bit );
            }
            if( i % 2 != 0 )        // remove this line to get output in nibbles
                printf( " " );
        }
#endif
        
//        printf( "\nDecimal: " );
//        for( int i = 0; i < byteCounter; i++ )
//            printf( "%3u ", byte_buffer[i] );

#ifdef PRINT_FULL_HEX
        printf( "\nHex:     " );
        for( int i = 0; i < nibbleCounter; i++ )
        {
            printf( "%3X ", buffer[i] );
            
            if( i % 2 != 0 )        // we do this to line up the hex with the nibbles above...
                printf( " " );
        }
#endif

        // hide preamble and stuff - hibbles = hex nibbles
        printf( "\nHibbles:  " );
        for( int i = 0; i < nibbleCounter; i++ )
        {
            const unsigned char preamble[] = { 0xA, 0xA, 0x2, 0xD, 0xD, 0x4 };
            if( i < 6 && preamble[i] != buffer[i] )
            {
                if( !s_latch )
                {
                    printf( "preamble and sync word don't match[%d]: %2x !=", i, preamble[i] );
                    s_latch = true;
                }
                printf( "%2x ", buffer[i] );
            }
            else if( i >= 6 )
            {
                if( s_latch )
                {
                    printf( "\n" );
                    s_latch = false;
                }
                printf( "%2X ", buffer[i] );
            }
                
        }
        s_latch = false;
        
        uint8_t crc = CalculateCRC( &byte_buffer[3], byteCounter - 4 );
        uint8_t message_crc = byte_buffer[byteCounter - 1];
        printf( " CRC: %s (0x%X)\nBytes in payload: %d + 1 CRC byte, total bits: %d (%d with preamble)\n", message_crc == crc ? "GOOD" : "WRONG", crc, byteCounter - 4, (int)stripped.length - 24, (int)stripped.length );

        printf( "\nPayload: " );
        for( int i = 3; i < byteCounter; i++ )
            printf( "%02X", byte_buffer[i] );

        printf( "  ->  " );
        for( int i = 3; i < byteCounter; i++ )
        {
            printf( "0x%02X", byte_buffer[i] );
            
            if( i != byteCounter - 1 )
                printf( ", " );
        }

        // do a little parsing... not sure what the first byte is-  but I gather it's a station ID,
        // the middle three bytes are the rain counter. last byte is the CRC.
        uint32_t rain_counter = (byte_buffer[4] << 16) | (byte_buffer[5] << 8) | byte_buffer[6];
        printf( "\n\nRain[0x%x]: %0.2f mm (%0.2f inches)\n", byte_buffer[3], rain_counter * 0.5, (rain_counter * 0.5) * millimeter2inch );
    
        printf( "\n" );
        free( buffer );
        free( byte_buffer );
    }
    return 0;
}
